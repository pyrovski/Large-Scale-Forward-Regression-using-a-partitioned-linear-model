Instructions for Compiling: (These are currently setup for TACC already in the Makefile)

.) Edit the Makefile and set the BLAS_LAPACK_LIB variable
   so that you can link against the BLAS and Lapack on your
   system.

.) Edit the Makefile's GSL_INCLUDE and GSL_LIB variables to point to the
   location of the GSL header files and libraries on your system.

.) Determine the naming scheme used on your system for calling
   Fortran functions from C.  By default, the trailing underscore,
   eg. dgesdd_, is used.  Edit the #defines in my_lapack_blas.h
   appropriately to account for this naming scheme.

.) Type 'make reference_glm'.  This should produce an executable
   called reference_glm.

Instructions for Running:
.) You must run the code in the scratch folder on longhorn. To get to the scratch folder, simply type
   "cds". Place the folder "iplant_jwp" inside of this directory. 
.) Unzip the folder "data_maize_nam.zip", and keep it in the iplant_jwp directory.
.) You may need to load the following modules with the command "module load module_name".
	openmpi
	cuda/3.2
	gsl
	intel
.) Modify line 2 of the file reference_glm.in to provide the path location of "data_maize_nam" inside
   of scratch. This file also contains the names of files for input of fixed effects, imputed markers,
   and residuals. Below this is the original size of the fixed effects matrix (currently set to 26), 
   followed by the length of the SNPs, and lastly the total number of SNPs. The default for these two 
   values in the file are set to 4892, and 512.
   
.) From the previous instruction, the reference_glm program by default reads the reference_glm.in
   input file to obtain the path the following 3 data files:
   
   a) fixed.effects.nam.sorted.filtered.dat
   b) imputed.marker.chr10.sorted.filtered.dat
   c) residuals.chr10.sorted.dat

   containing the population structure, genotypes, and phenotypes.
   You must specify the appropriate path to these files on your
   system.
   
.) To change the maximum running time on Longhorn you must modify the file "gpu_script". This can be 
   done on the 6th line. The 7th line determines the number of GPU and CPU cores to be used. To 
   increase or decrease the verbosity adjust the "-v 2" on line #8 to either 0, 1, or 2.
.) To run the code you must execute the GPU script. To do this use the command "qsub ./gpu_script"
.) After running the code 50 different
   p-values will be computed and stored in the file Pval.dat.
   (This particular version is set to run for 50 iterations, but this can be easily done as a user input)
.) Two additional files will be printed. These are gpu_script.e and gpu_script.o. gpu_script.e will provide any 
   errors that may have occurred, and gpu_script.o provides useful program information. This includes timing and 
   overhead information for each CPU and GPU core.

Generating Binary SNP data:
.) If you wish to create new SNP test data, you can do so with the program "gen" inside of 
   the directory "data_maize_nam". Use the following command to run this program "$ ./gen 4892 512 test512.bin"
   The first number is the SNP length, followed by the number of SNPs, and finally the output file name.


Description of files:

  Headers:
  -------
  GetPot - input parsing library header
  fortran_matrix.h - defines the FortranMatrix object used in BLAS/Lapack computations
  glm.h - Defines the main GLM routine (actually 2 routines, one is specialized to a Kt vector)
  inner.h - utility function, computes the inner product between 2 vectors
  my_lapack_blas.h - #defines and function prototypes for the BLAS/Lapack routines used in this code
  print_matrix.h - For printing column-major matrices
  rank.h - Computes the approximate rank of a FortranMatrix (using the SVD) relative to some tolerance
  svd.h - The SVD creation and application routines, used by the GLM for computing pseudoinverses
   
  Source files:
  ------------
  reference_glm.C - The outer loops which call the GLM routine (defined in glm.h)

  Others:
  ------
  reference_glm.in - Input file for reference_glm.C, must contain path, see above for additional details
  Makefile - Set variables, etc for the compilation
  README - This file
